1.
Question 1
What does a neuron compute?

(a) A neuron computes a linear function (z = Wx + b) followed by an activation function
(b) A neuron computes a function g that scales the input x linearly (Wx + b)
(c) A neuron computes the mean of all features before applying the output to an activation function
(d) A neuron computes an activation function followed by a linear function (z = Wx + b)

Ans-> (a) A neuron computes a linear function (z = Wx + b) followed by an activation function

2.
Question 2
Which of these is the "Logistic Loss"?

Ans-> (https://en.wikipedia.org/wiki/Cross_entropy#Cross-entropy_error_function_and_logistic_regression)

3.
Question 3
Suppose img is a (32,32,3) array, representing a 32x32 image with 3 color channels red, green and blue. How do you reshape this into a column vector?

(a) x = img.reshape((32*32*3,1))
(b) x = img.reshape((3,32*32))
(c) x = img.reshape((1,32*32,*3))
(d) x = img.reshape((32*32,3))

Ans-> (a) x = img.reshape((32*32*3,1))

4.
Question 4
Consider the two following random arrays "a" and "b":
 a = np.random.randn(2, 3) # a.shape = (2, 3)b = np.random.randn(2, 1) # b.shape = (2, 1)c = a + b 
What will be the shape of "c"?

(a) c.shape = (2, 3)
(b) c.shape = (2, 1)
(c) The computation cannot happen because the sizes don't match. It's going to be "Error"!
(d) c.shape = (3, 2)

Ans-> (a) c.shape = (2, 3)

5.
Question 5
Consider the two following random arrays "a" and "b":
 a = np.random.randn(4, 3) # a.shape = (4, 3)b = np.random.randn(3, 2) # b.shape = (3, 2)c = a*b 
What will be the shape of "c"?

(a) c.shape = (3, 3)
(b) c.shape = (4, 3)
(c) The computation cannot happen because the sizes don't match. It's going to be "Error"!
(d) c.shape = (4,2)

Ans-> (c) The computation cannot happen because the sizes don't match. It's going to be "Error"!

6.
Question 6
Suppose you have n_x, input features per example. Recall that X = [x^{(1)} x^{(2)} ... x^{(m)}]X=[x(1)x(2)...x(m)]. What is the dimension of X? 

(a) (n_x, m)
(b) (m,1)
(c) (1,m)
(d) (m,n_x)

Ans-> (a) (n_x, m)

7.
Question 7
Recall that "np.dot(a,b)" performs a matrix multiplication on a and b, whereas "a*b" performs an element-wise multiplication.
Consider the two following random arrays "a" and "b":
 a = np.random.randn(12288, 150) # a.shape = (12288, 150)b = np.random.randn(150, 45) # b.shape = (150, 45)c = np.dot(a,b) 
What is the shape of c?

(a) c.shape = (150,150)
(b) c.shape = (12288, 45)
(c) The computation cannot happen because the sizes don't match. It's going to be "Error"!
(d) c.shape = (12288, 150)

Ans-> (b) c.shape = (12288, 45)

8.
Question 8
Consider the following code snippet:
 # a.shape = (3,4)# b.shape = (4,1)for i in range(3): for j in range(4): c[i][j] = a[i][j] + b[j] 
How do you vectorize this?

(a) c = a.T + b
(b) c = a + b.T
(c) c = a.T + b.T
(d) c = a + b

Ans-> (b) c = a + b.T

9.
Question 9
Consider the following code:
 a = np.random.randn(3, 3)b = np.random.randn(3, 1)c = a*b 
What will be c? (If you’re not sure, feel free to run this in python to find out).

(a) This will invoke broadcasting, so b is copied three times to become (3, 3), and *∗ invokes a matrix multiplication operation of two 3x3 matrices so c.shape will be (3, 3)
(b) This will multiply a 3x3 matrix a with a 3x1 vector, thus resulting in a 3x1 vector. That is, c.shape = (3,1). 
(c) It will lead to an error since you cannot use “*” to operate on these two matrices. You need to instead use np.dot(a,b) 
(d) This will invoke broadcasting, so b is copied three times to become (3,3), and *∗ is an element-wise product so c.shape will be (3, 3)

Ans-> 

10.
Question 10
Consider the following computation graph.
What is the output J?

(a) J = (b - 1) * (c + a)
(b) J = a*b + b*c + a*c
(c) J = (a - 1) * (b + c)
(d) J = (c - 1)*(b + a)

Ans-> (c) J = (a - 1) * (b + c)
